import os
import re
from rich.console import Console
from rich.panel import Panel
from rich.table import Table
from langchain_gigachat.chat_models import GigaChat
from langchain_core.messages import HumanMessage, AIMessage, SystemMessage
from dotenv import load_dotenv
from pathlib import Path
from langgraph.prebuilt import create_react_agent
from langgraph.checkpoint.memory import MemorySaver
from source.prompts import system_prompt  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
from source.tools import get_all_course_names, get_most_similar_course, register_for_course
from langchain_community.document_loaders import DirectoryLoader, TextLoader
from langchain.text_splitter import RecursiveCharacterTextSplitter

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
env_path = Path(__file__).parent.parent / 'config' / 'demo_env.env'
if not env_path.exists():
    print(f"‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω –ø–æ –ø—É—Ç–∏: {env_path.absolute()}")
else:
    print(f"‚úÖ –§–∞–π–ª .env –Ω–∞–π–¥–µ–Ω: {env_path.absolute()}")
    # –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    load_dotenv(env_path)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–∏ GigaChat
model = GigaChat(
    credentials=os.getenv("GIGACHAT_API_CREDENTIALS"),
    scope=os.getenv("GIGACHAT_API_SCOPE"),
    model=os.getenv("GIGACHAT_MODEL_NAME"),
    verify_ssl_certs=False,
    profanity_check=False,
    timeout=600,
    top_p=0.3,
    temperature=0.1,
    max_tokens=6000
)

# response = model.invoke([HumanMessage(content="–ü—Ä–∏–≤–µ—Ç, –∫–∞–∫–æ–π –ø–æ—Å–æ–≤–µ—Ç—É–µ—à—å –∫—É—Ä—Å?")])
# console = Console()
# console.print(response)

tools = [get_all_course_names, get_most_similar_course, register_for_course]
agent = create_react_agent(
    model=model,
    tools=tools,
    state_modifier=system_prompt,  # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∫–æ–Ω—Ç–µ–∫—Å—Ç
    checkpointer=MemorySaver()  # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ LangGraph –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞–º—è—Ç–∏ –∞–≥–µ–Ω—Ç–∞
)

def chat(thread_id: str):
    print("–¢–µ—Å—Ç —Ä–∞–±–æ—Ç—ã –∞–≥–µ–Ω—Ç–∞ —Å —Å–∏—Å—Ç–µ–º–Ω—ã–º –ø—Ä–æ–º–ø—Ç–æ–º.")

    response = agent.invoke({
        "messages": [
            {"role": "user", "content": "–Ø –ò–¢-–∞—Ä—Ö–∏—Ç–µ–∫—Ç–æ—Ä. –ö–∞–∫–∏–µ –∫—É—Ä—Å—ã –º–Ω–µ –ø–æ–¥–æ–π–¥—É—Ç?",}
        ]},
        config = {"configurable": {"thread_id": thread_id}}
    )
    print("–û—Ç–≤–µ—Ç –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç–∞:", response["messages"][-1].content)

def load_project_and_analysis(project_path: str, analysis_file: str):
    # 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –≤—Å–µ .java —Ñ–∞–π–ª—ã Maven-–ø—Ä–æ–µ–∫—Ç–∞ –≤ –≤–∏–¥–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
    loader = DirectoryLoader(project_path, glob="**/*.java", loader_cls=TextLoader)
    docs = loader.load()
    # docs ‚Äì —Å–ø–∏—Å–æ–∫ Document, –∫–∞–∂–¥—ã–π —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç —Ñ–∞–π–ª–∞ –∏ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—É—Ç—å)

    # 2. –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª —Å –∞–Ω–∞–ª–∏—Ç–∏–∫–æ–π
    analysis_doc = TextLoader(analysis_file).load()[0]  # load() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏–∑ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞

    # 3. –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ: –ø—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –∏ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ —Ä–∞–∑–±–∏–≤–∞–µ–º –∏—Ö
    text_splitter = RecursiveCharacterTextSplitter(chunk_size=2000, chunk_overlap=200)
    split_docs = []
    for doc in docs:
        if len(doc.page_content) > 2500:  # –ø—Ä–∏–º–µ—Ä –ø–æ—Ä–æ–≥–∞ –¥–ª–∏–Ω—ã —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —Ä–∞–∑–±–∏–µ–Ω–∏—è
            chunks = text_splitter.split_text(doc.page_content)
            for i, chunk in enumerate(chunks):
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π Document –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞, —Å–æ—Ö—Ä–∞–Ω—è—è –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ –≤ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö
                meta = doc.metadata.copy()
                meta["chunk"] = i
                split_docs.append(type(doc)(page_content=chunk, metadata=meta))
        else:
            split_docs.append(doc)
    # –¢–µ–ø–µ—Ä—å split_docs —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏–±–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã, –ª–∏–±–æ —Ä–∞–∑–±–∏—Ç—ã–µ –Ω–∞ —á–∞—Å—Ç–∏ –±–æ–ª—å—à–∏–µ —Ñ–∞–π–ª—ã
    return split_docs, analysis_doc.page_content

def build_prompt_and_query(split_docs, analysis_text):
    # 1. –°–æ—Å—Ç–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π
    system_content = (
        "–¢—ã ‚Äî AI-–ø–æ–º–æ—â–Ω–∏–∫, —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç –ø–æ Java –∏ –∞–≤—Ç–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—é. "
        "–¢–µ–±–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω –∫–æ–¥ –ø—Ä–æ–µ–∫—Ç–∞ –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –∏ –æ–±–∑–æ—Ä —Å –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è–º–∏ –ø–æ —É–ª—É—á—à–µ–Ω–∏—é. "
        "–¢–≤–æ—è –∑–∞–¥–∞—á–∞: –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –Ω–∞–±–æ—Ä –∞–≤—Ç–æ—Ç–µ—Å—Ç–æ–≤ –∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –Ω–∞ Java (—Ñ—Ä–µ–π–º–≤–æ—Ä–∫ TestNG) –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –ø–æ–∫—Ä—ã—Ç–∏—è. "
        "–°–Ω–∞—á–∞–ª–∞ –ø—Ä–µ–¥—Å—Ç–∞–≤—å –∫—Ä–∞—Ç–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Ç–µ—Å—Ç–æ–≤ –∏ –ø—Ä–æ–±–ª–µ–º, –∑–∞—Ç–µ–º –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã. "
        "–ù–æ–≤—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–µ–¥–æ—Å—Ç–∞–≤—å –≤ –≤–∏–¥–µ –ø–æ–ª–Ω–æ–≥–æ –∫–æ–¥–∞ Java-–∫–ª–∞—Å—Å–æ–≤ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º TestNG –∞–Ω–Ω–æ—Ç–∞—Ü–∏–π @Test. "
        "–£–±–µ–¥–∏—Å—å, —á—Ç–æ –Ω–æ–≤—ã–µ —Ç–µ—Å—Ç—ã —É—á–∏—Ç—ã–≤–∞—é—Ç –∑–∞–º–µ—á–∞–Ω–∏—è –∏–∑ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞ –∏ –Ω–µ –¥—É–±–ª–∏—Ä—É—é—Ç —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."
    )
    system_message = SystemMessage(content=system_content)

    # 2. –ö–æ–º–ø–æ–Ω—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –¥–∞–Ω–Ω—ã–º–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    user_content = "### –ü—Ä–æ–µ–∫—Ç: –∏—Å—Ö–æ–¥–Ω—ã–µ –∞–≤—Ç–æ—Ç–µ—Å—Ç—ã\n"
    for doc in split_docs:
        file_name = doc.metadata.get("source", "unknown file")
        # –¥–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç–∫—É —á–∞—Å—Ç–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –±—ã–ª —Ä–∞–∑–¥–µ–ª–µ–Ω
        if "chunk" in doc.metadata:
            file_name += f" (—á–∞—Å—Ç—å {doc.metadata['chunk'] + 1})"
        # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É –≤—Å—Ç–∞–≤–ª—è–µ–º–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∫–∞–∂–¥–æ–≥–æ —Ñ—Ä–∞–≥–º–µ–Ω—Ç–∞, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        code_snippet = doc.page_content
        if len(code_snippet) > 1000:
            code_snippet = code_snippet[:1000] + "... [–∫–æ–Ω—Ç–µ–Ω—Ç —É—Å–µ—á–µ–Ω]\n"
        user_content += f"\n=== –§–∞–π–ª: {file_name} ===\n{code_snippet}\n"
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á–µ—Ç
    user_content += "\n### –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–π –æ—Ç—á—ë—Ç –∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è\n"
    user_content += analysis_text[:3000]  # –æ–≥—Ä–∞–Ω–∏—á–∏–º—Å—è –ø–µ—Ä–≤—ã–º–∏ N —Å–∏–º–≤–æ–ª–∞–º–∏, –µ—Å–ª–∏ —Ñ–∞–π–ª –æ—á–µ–Ω—å –±–æ–ª—å—à–æ–π

    user_message = HumanMessage(content=user_content)

    # 3. –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –º–æ–¥–µ–ª–∏ GigaChat
    # (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ—Ç—Å—è, —á—Ç–æ credentials —É–∂–µ –∑–∞–¥–∞–Ω—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π –æ–∫—Ä—É–∂–µ–Ω–∏—è GIGACHAT_CREDENTIALS)
    chat = model

    # 4. –í—ã–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å —Å –ø–æ–¥–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏
    response = chat.invoke([system_message, user_message])
    return response.content  # —Ç–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞ –æ—Ç GigaChat

def save_generated_tests(response_text: str, output_dir: str):
    os.makedirs(output_dir, exist_ok=True)
    saved_files = []
    # –†–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ Java –≤–Ω—É—Ç—Ä–∏ –æ—Ç–≤–µ—Ç–∞ (```java ... ```)
    code_blocks = re.findall(r"```(?:java)?\s*(.*?)```", response_text, flags=re.DOTALL)
    if code_blocks:
        for i, code in enumerate(code_blocks, start=1):
            # –ü–æ–ø—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∏–º—è –∫–ª–∞—Å—Å–∞ –∏–∑ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ (–ø–æ –æ–±—ä—è–≤–ª–µ–Ω–∏—é class)
            match = re.search(r"class\s+(\w+)", code)
            if match:
                class_name = match.group(1)
                file_name = f"{class_name}.java"
            else:
                file_name = f"GeneratedTest{i}.java"
            file_path = os.path.join(output_dir, file_name)
            with open(file_path, "w", encoding="utf-8") as f:
                f.write(code.strip() + "\n")
            saved_files.append(file_path)
    else:
        # –ï—Å–ª–∏ –±–ª–æ–∫–æ–≤ –∫–æ–¥–∞ –Ω–µ –Ω–∞—à–ª–∏, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤–µ—Å—å –æ—Ç–≤–µ—Ç –∫–∞–∫ –µ–¥–∏–Ω—ã–π —Ñ–∞–π–ª (–Ω–∞ —Å–ª—É—á–∞–π –∏–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ –≤—ã–≤–æ–¥–∞)
        file_path = os.path.join(output_dir, "GeneratedTestOutput.txt")
        with open(file_path, "w", encoding="utf-8") as f:
            f.write(response_text)
        saved_files.append(file_path)
    return saved_files

def generate_tests_for_project(project_path: str, analysis_file: str, output_dir: str):
    # todo: –ü–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∞–π–ª–æ–≤ –≤ –≤–∏–¥–µ "–ê–Ω–∞–ª–∏—Ç–∏–∫–∏".
    # 1. –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–µ–∫—Ç–∞ –∏ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
    docs, analysis_text = load_project_and_analysis(project_path, analysis_file)
    # 2. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞ –∏ –∑–∞–ø—Ä–æ—Å –∫ GigaChat
    response_text = build_prompt_and_query(docs, analysis_text)
    # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ –≤ —Ñ–∞–π–ª—ã
    result_files = save_generated_tests(response_text, output_dir)
    print(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∞–π–ª–æ–≤: {len(result_files)}. –û–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–µ: {output_dir}")
    return result_files

if __name__ == "__main__":
    print("üîê –¢–æ–∫–µ–Ω –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å:", os.getenv("GIGACHAT_API_CREDENTIALS")[:10], "...")
    generate_tests_for_project(
        project_path="/Users/m_dev/Desktop/sberProject/simple/external_projects/coffee-autotests",
        analysis_file="/Users/m_dev/Desktop/sberProject/simple/external_projects/coffee-autotests/analysis.txt",
        output_dir="/Users/m_dev/Desktop/sberProject/simple/external_projects/coffee-autotests/generated_tests"
    )
    # chat('SberAX_consultant')